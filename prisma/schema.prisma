generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    PROFESSOR
    STUDENT
}

model User {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String   @unique
    password  String
    name      String
    isVerified  Boolean  @default(false)
    role      UserRole @default(STUDENT)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    department   Department? @relation(fields: [departmentId], references: [id])
    departmentId String?     @db.ObjectId

    // Student specific
    enrollments      Enrollment[]
    sentMessages     Message[]    @relation("SentMessages")
    receivedMessages Message[]    @relation("ReceivedMessages")
    examResults      ExamResult[]

    // Professor specific
    courses           Course[]
    exams             Exam[]
    GraduationProject GraduationProject[]
    Message           Message[]
    // students          StudentsProfessor[] @relation("Student")
    // professors        StudentsProfessor[] @relation("Professor")

    GraduationProjectMember GraduationProjectMember[]

    ProfessorProject ProfessorProject[]
}

// model StudentsProfessor {
//     id          String @id @default(auto()) @map("_id") @db.ObjectId
//     student     User   @relation(fields: [studentId], references: [id], name: "Student")
//     studentId   String @db.ObjectId
//     professor   User   @relation(fields: [professorId], references: [id], name: "Professor")
//     professorId String @db.ObjectId
// }

model Department {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    code      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    users   User[]
    courses Course[]

    GraduationProject GraduationProject[]
}

model Course {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    code        String   @unique
    description String
    credits     Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    department   Department   @relation(fields: [departmentId], references: [id])
    departmentId String       @db.ObjectId
    professor    User         @relation(fields: [professorId], references: [id])
    professorId  String       @db.ObjectId
    enrollments  Enrollment[]
    exams        Exam[]
}

model Enrollment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    student   User     @relation(fields: [studentId], references: [id])
    studentId String   @db.ObjectId
    course    Course   @relation(fields: [courseId], references: [id])
    courseId  String   @db.ObjectId
    grade     Float?
    status    String   @default("ENROLLED")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([studentId, courseId])
}

enum ExamType {
    QUIZ
    FINAL
}

model Exam {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    duration    Int
    type        ExamType // QUIZ or FINAL
    startTime   DateTime
    endTime     DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String       @db.ObjectId
    professor   User         @relation(fields: [professorId], references: [id], onDelete: Cascade)
    professorId String       @db.ObjectId
    results     ExamResult[]

    Table Table[]
}

model ExamResult {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    score     Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    student   User   @relation(fields: [studentId], references: [id])
    studentId String @db.ObjectId
    exam      Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)
    examId    String @db.ObjectId
}

model Message {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    isRead    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    sender     User    @relation("SentMessages", fields: [senderId], references: [id])
    senderId   String  @db.ObjectId
    receiver   User    @relation("ReceivedMessages", fields: [receiverId], references: [id])
    receiverId String  @db.ObjectId
    User       User?   @relation(fields: [userId], references: [id])
    userId     String? @db.ObjectId
}

model GraduationProject {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    status      ProjectStatus @default(PENDING)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    notes       String?
    grade       Float?

    // Relations
    leader       User?              @relation(fields: [leaderId], references: [id])
    leaderId     String?            @db.ObjectId
    professor    ProfessorProject[]
    department   Department?        @relation(fields: [departmentId], references: [id])
    departmentId String?            @db.ObjectId

    members GraduationProjectMember[]
}

enum ProjectStatus {
    PENDING
    APPROVED
    REJECTED
}

model ProfessorProject {
    id          String                 @id @default(auto()) @map("_id") @db.ObjectId
    professor   User?                  @relation(fields: [professorId], references: [id])
    professorId String?                @db.ObjectId
    project     GraduationProject?     @relation(fields: [projectId], references: [id])
    projectId   String?                @db.ObjectId
    status      ProfessorProjectStatus @default(PENDING)
    notes       String?
}

enum ProfessorProjectStatus {
    PENDING
    APPROVED
    REJECTED
}

model GraduationProjectMember {
    id                  String            @id @default(auto()) @map("_id") @db.ObjectId
    graduationProject   GraduationProject @relation(fields: [graduationProjectId], references: [id])
    graduationProjectId String            @db.ObjectId
    user                User              @relation(fields: [userId], references: [id])
    userId              String            @db.ObjectId
    role                ProjectRole       @default(MEMBER)
}

model Table {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    url       String
    type      TableType
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    exam      Exam?     @relation(fields: [examId], references: [id])
    examId    String?   @db.ObjectId
}

enum TableType {
    EXAM
    GRADUATION_PROJECT
    GENERATE_TABLE
}

enum ProjectRole {
    LEADER
    MEMBER
}
